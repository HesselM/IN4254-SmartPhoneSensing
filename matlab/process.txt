
%import annotated log
file = '../logs/log_accelActivity1431957054688_corrected.txt';
[log_time, log_run, log_a, log_mt, log_accel, log_mag] = logImport(file, true);

%select suitable part for training
tr_run   = log_run(s1:e1, :);
tr_accel = log_accel(s1:e1, :);
tr_mt    = log_mt(s1:e1, :);

% calculate features
wstd  = 125
wmean = 200
tmin  = 40
tmax  = 100
tr_feature_r = featureTrain(tr_accel, tr_mt, tr_accel, wstd, wmean, tmin, tmax);

%correct annotation of features
% (due too different window sizes, some errors might occur)
tr_feature_s = featureCorrect(tr_feature_r, 15);

%import log to do testing on
file = '../logs/log_accelActivity1431783218979.txt'
[tst_time, tst_run, tst_a, tst_mt, tst_accel, tst_mag] = logImport(file, true);

%select suitable part for testing and calculate features
fs = signal2feature(tst_accel(s2:e2,:), wstd, wmean, tmin, tmax);

%classification
fs_mt_r = knn(tr_feature_s, fs, 5);

% smoothen data and determine timestamps
[fs_mt_log fs_mt_math] = s2fFilter(fs_mt_r, 10);


%plot data
>> figure(2);clf;hold on; plot(fs_mt_r, 'Color', [0 0 0]); plot(fs_mt-0.05, 'Color', [1 0 0]);plot(fs_mt_math-0.1, 'Color', [0 1 0]);plot(fs_mt_log-0.15, 'Color', [0 0 1]);
